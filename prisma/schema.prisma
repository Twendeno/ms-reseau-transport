// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coordinate {
  uuid        String              @id @default(uuid())
  longitude   Float
  latitude    Float
  address     String?             @db.VarChar(255)
  name        String?             @db.VarChar(50)
  latLng      String              @unique
  isStop      Boolean             @default(false)
  isDeparture Boolean             @default(false)
  isArrival   Boolean             @default(false)
  towns       Town[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  geometry    CoordinatePolygon[]

  @@index([latLng, name, address])
}

model Geometry {
  uuid            String              @id @default(uuid())
  type            String              @default("LineString")
  name            String              @unique @db.VarChar(50)
  reference       String              @unique @db.VarChar(50)
  department_uuid String
  departments     Department          @relation(fields: [department_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  town_uuid       String
  towns           Town                @relation(fields: [town_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  geodata         Json?
  assignedBy      String
  lastModifiedBy  String
  color           String              @unique @db.VarChar(7)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  coordinates     CoordinatePolygon[]

  @@index([reference, name])
}

model CoordinatePolygon {
  uuid                      String  @id @default(uuid())
  name                      String  @db.VarChar(50)
  departure                 String  @db.VarChar(50)
  arrival                   String  @db.VarChar(50)
  reference                 String  @unique @db.VarChar(50)
  isOnline                  Boolean @default(false)
  departure_coordinate_uuid String? @default("NULL")
  arrival_coordinate_uuid   String? @default("NULL")

  geometry_uuid String
  geometry      Geometry @relation(fields: [geometry_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)

  coordinate_uuid String
  coordinate      Coordinate @relation(fields: [coordinate_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)

  assignedAt DateTime @default(now())
  assignedBy String
}

model Department {
  uuid           String     @id @default(uuid())
  name           String     @unique @db.VarChar(50)
  area           Float      @default(0)
  towns          Town[]
  geodata        Json?
  geometries     Geometry[]
  assignedBy     String
  lastModifiedBy String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([name])
}

model Town {
  uuid            String     @id @default(uuid())
  name            String     @unique @db.VarChar(50)
  area            Float      @default(0)
  districts       District[]
  geodata         Json?
  coordinate_uuid String
  coordinate      Coordinate @relation(fields: [coordinate_uuid], references: [uuid], onDelete: Restrict, onUpdate: Cascade)
  department_uuid String
  department      Department @relation(fields: [department_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  geometry        Geometry[]
  assignedBy      String
  lastModifiedBy  String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@index([name])
}

model District {
  uuid           String   @id @default(uuid())
  name           String   @unique
  area           Float    @default(0)
  geodata        Json?
  town_uuid      String
  town           Town     @relation(fields: [town_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  assignedBy     String
  lastModifiedBy String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([name])
}
